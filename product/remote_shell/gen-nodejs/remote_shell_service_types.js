//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var ComputerInfo = module.exports.ComputerInfo = function(args) {
  this.osName = null;
  this.userName = null;
  if (args) {
    if (args.osName !== undefined && args.osName !== null) {
      this.osName = args.osName;
    }
    if (args.userName !== undefined && args.userName !== null) {
      this.userName = args.userName;
    }
  }
};
ComputerInfo.prototype = {};
ComputerInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.osName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ComputerInfo.prototype.write = function(output) {
  output.writeStructBegin('ComputerInfo');
  if (this.osName !== null && this.osName !== undefined) {
    output.writeFieldBegin('osName', Thrift.Type.STRING, 1);
    output.writeString(this.osName);
    output.writeFieldEnd();
  }
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRING, 2);
    output.writeString(this.userName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CpuInfo = module.exports.CpuInfo = function(args) {
  this.rate = null;
  if (args) {
    if (args.rate !== undefined && args.rate !== null) {
      this.rate = args.rate;
    }
  }
};
CpuInfo.prototype = {};
CpuInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.rate = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CpuInfo.prototype.write = function(output) {
  output.writeStructBegin('CpuInfo');
  if (this.rate !== null && this.rate !== undefined) {
    output.writeFieldBegin('rate', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.rate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MemoryInfo = module.exports.MemoryInfo = function(args) {
  this.total = null;
  this.used = null;
  if (args) {
    if (args.total !== undefined && args.total !== null) {
      this.total = args.total;
    }
    if (args.used !== undefined && args.used !== null) {
      this.used = args.used;
    }
  }
};
MemoryInfo.prototype = {};
MemoryInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.total = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.used = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MemoryInfo.prototype.write = function(output) {
  output.writeStructBegin('MemoryInfo');
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.total);
    output.writeFieldEnd();
  }
  if (this.used !== null && this.used !== undefined) {
    output.writeFieldBegin('used', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.used);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DiskInfo = module.exports.DiskInfo = function(args) {
  this.total = null;
  this.free = null;
  this.readSpeed = null;
  this.writeSpeed = null;
  if (args) {
    if (args.total !== undefined && args.total !== null) {
      this.total = args.total;
    }
    if (args.free !== undefined && args.free !== null) {
      this.free = args.free;
    }
    if (args.readSpeed !== undefined && args.readSpeed !== null) {
      this.readSpeed = args.readSpeed;
    }
    if (args.writeSpeed !== undefined && args.writeSpeed !== null) {
      this.writeSpeed = args.writeSpeed;
    }
  }
};
DiskInfo.prototype = {};
DiskInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.total = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.free = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.readSpeed = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.writeSpeed = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DiskInfo.prototype.write = function(output) {
  output.writeStructBegin('DiskInfo');
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.total);
    output.writeFieldEnd();
  }
  if (this.free !== null && this.free !== undefined) {
    output.writeFieldBegin('free', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.free);
    output.writeFieldEnd();
  }
  if (this.readSpeed !== null && this.readSpeed !== undefined) {
    output.writeFieldBegin('readSpeed', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.readSpeed);
    output.writeFieldEnd();
  }
  if (this.writeSpeed !== null && this.writeSpeed !== undefined) {
    output.writeFieldBegin('writeSpeed', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.writeSpeed);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NetworkInfo = module.exports.NetworkInfo = function(args) {
  this.downloadSpeed = null;
  this.uploadSpeed = null;
  if (args) {
    if (args.downloadSpeed !== undefined && args.downloadSpeed !== null) {
      this.downloadSpeed = args.downloadSpeed;
    }
    if (args.uploadSpeed !== undefined && args.uploadSpeed !== null) {
      this.uploadSpeed = args.uploadSpeed;
    }
  }
};
NetworkInfo.prototype = {};
NetworkInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.downloadSpeed = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.uploadSpeed = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NetworkInfo.prototype.write = function(output) {
  output.writeStructBegin('NetworkInfo');
  if (this.downloadSpeed !== null && this.downloadSpeed !== undefined) {
    output.writeFieldBegin('downloadSpeed', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.downloadSpeed);
    output.writeFieldEnd();
  }
  if (this.uploadSpeed !== null && this.uploadSpeed !== undefined) {
    output.writeFieldBegin('uploadSpeed', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.uploadSpeed);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShellRtn = module.exports.ShellRtn = function(args) {
  this.success = null;
  this.standardOutput = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.standardOutput !== undefined && args.standardOutput !== null) {
      this.standardOutput = args.standardOutput;
    }
  }
};
ShellRtn.prototype = {};
ShellRtn.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.standardOutput = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShellRtn.prototype.write = function(output) {
  output.writeStructBegin('ShellRtn');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.standardOutput !== null && this.standardOutput !== undefined) {
    output.writeFieldBegin('standardOutput', Thrift.Type.STRING, 2);
    output.writeString(this.standardOutput);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

