//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./remote_shell_service_types');
//HELPER FUNCTIONS AND STRUCTURES

var RemoteShellService_GetComputerInfo_args = function(args) {
};
RemoteShellService_GetComputerInfo_args.prototype = {};
RemoteShellService_GetComputerInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteShellService_GetComputerInfo_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteShellService_GetComputerInfo_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteShellService_GetComputerInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ComputerInfo(args.success);
    }
  }
};
RemoteShellService_GetComputerInfo_result.prototype = {};
RemoteShellService_GetComputerInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ComputerInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteShellService_GetComputerInfo_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteShellService_GetComputerInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteShellService_GetCpuInfo_args = function(args) {
};
RemoteShellService_GetCpuInfo_args.prototype = {};
RemoteShellService_GetCpuInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteShellService_GetCpuInfo_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteShellService_GetCpuInfo_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteShellService_GetCpuInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CpuInfo(args.success);
    }
  }
};
RemoteShellService_GetCpuInfo_result.prototype = {};
RemoteShellService_GetCpuInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CpuInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteShellService_GetCpuInfo_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteShellService_GetCpuInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteShellService_GetMemoryInfo_args = function(args) {
};
RemoteShellService_GetMemoryInfo_args.prototype = {};
RemoteShellService_GetMemoryInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteShellService_GetMemoryInfo_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteShellService_GetMemoryInfo_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteShellService_GetMemoryInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.MemoryInfo(args.success);
    }
  }
};
RemoteShellService_GetMemoryInfo_result.prototype = {};
RemoteShellService_GetMemoryInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.MemoryInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteShellService_GetMemoryInfo_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteShellService_GetMemoryInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteShellService_GetDiskInfo_args = function(args) {
};
RemoteShellService_GetDiskInfo_args.prototype = {};
RemoteShellService_GetDiskInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteShellService_GetDiskInfo_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteShellService_GetDiskInfo_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteShellService_GetDiskInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DiskInfo(args.success);
    }
  }
};
RemoteShellService_GetDiskInfo_result.prototype = {};
RemoteShellService_GetDiskInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DiskInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteShellService_GetDiskInfo_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteShellService_GetDiskInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteShellService_GetNetworkInfo_args = function(args) {
};
RemoteShellService_GetNetworkInfo_args.prototype = {};
RemoteShellService_GetNetworkInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteShellService_GetNetworkInfo_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteShellService_GetNetworkInfo_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteShellService_GetNetworkInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.NetworkInfo(args.success);
    }
  }
};
RemoteShellService_GetNetworkInfo_result.prototype = {};
RemoteShellService_GetNetworkInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.NetworkInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteShellService_GetNetworkInfo_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteShellService_GetNetworkInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteShellService_Execute_args = function(args) {
  this.cmdWithArgs = null;
  if (args) {
    if (args.cmdWithArgs !== undefined && args.cmdWithArgs !== null) {
      this.cmdWithArgs = args.cmdWithArgs;
    }
  }
};
RemoteShellService_Execute_args.prototype = {};
RemoteShellService_Execute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cmdWithArgs = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteShellService_Execute_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteShellService_Execute_args');
  if (this.cmdWithArgs !== null && this.cmdWithArgs !== undefined) {
    output.writeFieldBegin('cmdWithArgs', Thrift.Type.STRING, 1);
    output.writeString(this.cmdWithArgs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteShellService_Execute_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ShellRtn(args.success);
    }
  }
};
RemoteShellService_Execute_result.prototype = {};
RemoteShellService_Execute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ShellRtn();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteShellService_Execute_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteShellService_Execute_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteShellServiceClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
RemoteShellServiceClient.prototype = {};
RemoteShellServiceClient.prototype.seqid = function() { return this._seqid; };
RemoteShellServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };

RemoteShellServiceClient.prototype.GetComputerInfo = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetComputerInfo();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetComputerInfo();
  }
};

RemoteShellServiceClient.prototype.send_GetComputerInfo = function() {
  var output = new this.pClass(this.output);
  var args = new RemoteShellService_GetComputerInfo_args();
  try {
    output.writeMessageBegin('GetComputerInfo', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RemoteShellServiceClient.prototype.recv_GetComputerInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteShellService_GetComputerInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetComputerInfo failed: unknown result');
};

RemoteShellServiceClient.prototype.GetCpuInfo = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetCpuInfo();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetCpuInfo();
  }
};

RemoteShellServiceClient.prototype.send_GetCpuInfo = function() {
  var output = new this.pClass(this.output);
  var args = new RemoteShellService_GetCpuInfo_args();
  try {
    output.writeMessageBegin('GetCpuInfo', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RemoteShellServiceClient.prototype.recv_GetCpuInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteShellService_GetCpuInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetCpuInfo failed: unknown result');
};

RemoteShellServiceClient.prototype.GetMemoryInfo = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetMemoryInfo();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetMemoryInfo();
  }
};

RemoteShellServiceClient.prototype.send_GetMemoryInfo = function() {
  var output = new this.pClass(this.output);
  var args = new RemoteShellService_GetMemoryInfo_args();
  try {
    output.writeMessageBegin('GetMemoryInfo', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RemoteShellServiceClient.prototype.recv_GetMemoryInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteShellService_GetMemoryInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetMemoryInfo failed: unknown result');
};

RemoteShellServiceClient.prototype.GetDiskInfo = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetDiskInfo();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetDiskInfo();
  }
};

RemoteShellServiceClient.prototype.send_GetDiskInfo = function() {
  var output = new this.pClass(this.output);
  var args = new RemoteShellService_GetDiskInfo_args();
  try {
    output.writeMessageBegin('GetDiskInfo', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RemoteShellServiceClient.prototype.recv_GetDiskInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteShellService_GetDiskInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetDiskInfo failed: unknown result');
};

RemoteShellServiceClient.prototype.GetNetworkInfo = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetNetworkInfo();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetNetworkInfo();
  }
};

RemoteShellServiceClient.prototype.send_GetNetworkInfo = function() {
  var output = new this.pClass(this.output);
  var args = new RemoteShellService_GetNetworkInfo_args();
  try {
    output.writeMessageBegin('GetNetworkInfo', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RemoteShellServiceClient.prototype.recv_GetNetworkInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteShellService_GetNetworkInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetNetworkInfo failed: unknown result');
};

RemoteShellServiceClient.prototype.Execute = function(cmdWithArgs, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_Execute(cmdWithArgs);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_Execute(cmdWithArgs);
  }
};

RemoteShellServiceClient.prototype.send_Execute = function(cmdWithArgs) {
  var output = new this.pClass(this.output);
  var params = {
    cmdWithArgs: cmdWithArgs
  };
  var args = new RemoteShellService_Execute_args(params);
  try {
    output.writeMessageBegin('Execute', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RemoteShellServiceClient.prototype.recv_Execute = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteShellService_Execute_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('Execute failed: unknown result');
};
var RemoteShellServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
RemoteShellServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
RemoteShellServiceProcessor.prototype.process_GetComputerInfo = function(seqid, input, output) {
  var args = new RemoteShellService_GetComputerInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetComputerInfo.length === 0) {
    Q.fcall(this._handler.GetComputerInfo.bind(this._handler)
    ).then(function(result) {
      var result_obj = new RemoteShellService_GetComputerInfo_result({success: result});
      output.writeMessageBegin("GetComputerInfo", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetComputerInfo", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetComputerInfo(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RemoteShellService_GetComputerInfo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetComputerInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetComputerInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteShellServiceProcessor.prototype.process_GetCpuInfo = function(seqid, input, output) {
  var args = new RemoteShellService_GetCpuInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetCpuInfo.length === 0) {
    Q.fcall(this._handler.GetCpuInfo.bind(this._handler)
    ).then(function(result) {
      var result_obj = new RemoteShellService_GetCpuInfo_result({success: result});
      output.writeMessageBegin("GetCpuInfo", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetCpuInfo", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetCpuInfo(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RemoteShellService_GetCpuInfo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetCpuInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetCpuInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteShellServiceProcessor.prototype.process_GetMemoryInfo = function(seqid, input, output) {
  var args = new RemoteShellService_GetMemoryInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetMemoryInfo.length === 0) {
    Q.fcall(this._handler.GetMemoryInfo.bind(this._handler)
    ).then(function(result) {
      var result_obj = new RemoteShellService_GetMemoryInfo_result({success: result});
      output.writeMessageBegin("GetMemoryInfo", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetMemoryInfo", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetMemoryInfo(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RemoteShellService_GetMemoryInfo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetMemoryInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetMemoryInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteShellServiceProcessor.prototype.process_GetDiskInfo = function(seqid, input, output) {
  var args = new RemoteShellService_GetDiskInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetDiskInfo.length === 0) {
    Q.fcall(this._handler.GetDiskInfo.bind(this._handler)
    ).then(function(result) {
      var result_obj = new RemoteShellService_GetDiskInfo_result({success: result});
      output.writeMessageBegin("GetDiskInfo", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetDiskInfo", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetDiskInfo(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RemoteShellService_GetDiskInfo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetDiskInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetDiskInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteShellServiceProcessor.prototype.process_GetNetworkInfo = function(seqid, input, output) {
  var args = new RemoteShellService_GetNetworkInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetNetworkInfo.length === 0) {
    Q.fcall(this._handler.GetNetworkInfo.bind(this._handler)
    ).then(function(result) {
      var result_obj = new RemoteShellService_GetNetworkInfo_result({success: result});
      output.writeMessageBegin("GetNetworkInfo", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetNetworkInfo", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetNetworkInfo(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RemoteShellService_GetNetworkInfo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetNetworkInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetNetworkInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteShellServiceProcessor.prototype.process_Execute = function(seqid, input, output) {
  var args = new RemoteShellService_Execute_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.Execute.length === 1) {
    Q.fcall(this._handler.Execute.bind(this._handler),
      args.cmdWithArgs
    ).then(function(result) {
      var result_obj = new RemoteShellService_Execute_result({success: result});
      output.writeMessageBegin("Execute", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("Execute", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.Execute(args.cmdWithArgs, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RemoteShellService_Execute_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("Execute", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("Execute", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
